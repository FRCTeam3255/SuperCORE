apply plugin: 'maven-publish'
apply from: 'config.gradle'

// ========== Auto Gen Variables ========== //
def baseArtifactId = "${rootProject.name.toLowerCase()}"
def artifactGroupId = "${groupTLD}.${groupName}"
def releaseDir = "${releasesRepoUrl}/${groupTLD}/${groupName}/${baseArtifactId}"
def vendorFileOutput = file("${releaseDir}/${pubVersion}/${rootProject.name}-${pubVersion}.json")
def vendorFileOutputLatest = file("${releaseDir}/${rootProject.name}-latest.json")

// ========== Building ========== //
task libraryBuild() {}

task sourcesJar(type: Jar, dependsOn: classes) {
    group='building'
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    group='building'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

libraryBuild.dependsOn build

publishing {
    repositories {
        maven {
            name = "Local"
            url = releasesRepoUrl
        }
    }
}

task cleanReleaseRepo(type: Delete) {
    group = 'supercore'
    delete releasesRepoUrl
    delete releaseDir
}

// tasks.matching {it != cleanReleaseRepo}.all {it.dependsOn cleanReleaseRepo}

model {
    publishing {
        publications {
            java(MavenPublication) {
                artifact jar
                artifact sourcesJar
                artifact javadocJar

                artifactId = "${baseArtifactId}"
                groupId artifactGroupId
                version pubVersion
            }
        }
    }
}


// ========== Publishing ========== //
task generateVendorJson() {
    description = "Generates the WPILib vendor JSON file"
    group = "supercore"

    outputs.file vendorFileOutput
    inputs.file vendorFileInput

    doLast {
        println "Writing version ${pubVersion} to $vendorFileOutput"

        if (vendorFileOutput.exists()) {
            vendorFileOutput.delete()
        }
        def read = vendorFileInput.text.replace('${pubVersion}', pubVersion).replace('${baseArtifactId}', baseArtifactId).replace('${artifactGroupId}', artifactGroupId)
        vendorFileOutput.write(read)

        if (vendorFileOutputLatest.exists()) {
            vendorFileOutputLatest.delete()
        }
        vendorFileOutputLatest.write(read)
    }
}

task createWebFolders(type: Exec) {
    group = 'supercore'
    description = 'Creates index.html files to make releases navigatable.'
    println "Creating web folders."
    executable "bash"
    args "-c","source create_webdir.sh"
}

tasks.register('publishSuperCORE') {
    group = 'supercore'
    description = 'Publishes all Maven publications to the listed Maven repository.'
    dependsOn clean
    dependsOn tasks.withType(PublishToMavenRepository).matching {
        it.repository == publishing.repositories.Local
    }
    dependsOn tasks.generateVendorJson
    finalizedBy tasks.createWebFolders
    finalizedBy tasks.publishJavaDoc
}

tasks.register('cleanPublishSuperCORE') {
    group = 'supercore'
    description = 'Cleans releases and publishes all Maven publications to the listed Maven repository.'
    dependsOn tasks.cleanReleaseRepo
    dependsOn tasks.publishSuperCORE
}

tasks.register('cleanPublishSuperCORELocalDev') {
    group = 'supercore'
    description = 'Creates a local export of SuperCORE. Installable as vendor dep using http://127.0.0.1:5500/releases/com/frcteam3255/supercore/SuperCORE-latest.json'
    vendorFileInput = file("src/generate/LocalSuperCORE.json")
    dependsOn tasks.cleanReleaseRepo
    dependsOn tasks.publishSuperCORE
}

task publishJavaDoc(){
    group = 'supercore'
    description ='Adds Java Docs to release.'
    doLast {
        println "Copying ${buildDir}/docs/javadoc into ${releaseDir}/${pubVersion}/"
        copy {
            from "${buildDir}/docs/javadoc"
            into "${releaseDir}/${pubVersion}/javadoc"
        }
        copy {
            from "${buildDir}/docs/javadoc"
            into "${releaseDir}/javadoc-latest"
        }
    }
}
